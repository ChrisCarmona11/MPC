Sources\main.o:     file format elf32-littlearmSources\main.oarchitecture: arm, flags 0x00000011:HAS_RELOC, HAS_SYMSstart address 0x00000000private flags = 5000000: [Version5 EABI]Sections:Idx Name          Size      VMA       LMA       File off  Algn  0 .text         00000000  00000000  00000000  00000034  2**1                  CONTENTS, ALLOC, LOAD, READONLY, CODE  1 .data         00000000  00000000  00000000  00000034  2**0                  CONTENTS, ALLOC, LOAD, DATA  2 .bss          00000000  00000000  00000000  00000034  2**0                  ALLOC  3 .rodata       00000008  00000000  00000000  00000034  2**2                  CONTENTS, ALLOC, LOAD, READONLY, DATA  4 .text.main    0000006c  00000000  00000000  0000003c  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE  5 .debug_info   0000016c  00000000  00000000  000000a8  2**0                  CONTENTS, RELOC, READONLY, DEBUGGING  6 .debug_abbrev 0000008e  00000000  00000000  00000214  2**0                  CONTENTS, READONLY, DEBUGGING  7 .debug_loc    0000003a  00000000  00000000  000002a2  2**0                  CONTENTS, RELOC, READONLY, DEBUGGING  8 .debug_aranges 00000020  00000000  00000000  000002dc  2**0                  CONTENTS, RELOC, READONLY, DEBUGGING  9 .debug_macinfo 00067ab5  00000000  00000000  000002fc  2**0                  CONTENTS, READONLY, DEBUGGING 10 .debug_line   000001e9  00000000  00000000  00067db1  2**0                  CONTENTS, RELOC, READONLY, DEBUGGING 11 .debug_str    00000151  00000000  00000000  00067f9a  2**0                  CONTENTS, READONLY, DEBUGGING 12 .comment      0000007a  00000000  00000000  000680eb  2**0                  CONTENTS, READONLY 13 .ARM.attributes 00000033  00000000  00000000  00068165  2**0                  CONTENTS, READONLY 14 .debug_frame  00000030  00000000  00000000  00068198  2**2                  CONTENTS, RELOC, READONLY, DEBUGGINGSYMBOL TABLE:00000000 l    df *ABS*	00000000 main.c00000000 l    d  .text	00000000 .text00000000 l    d  .data	00000000 .data00000000 l    d  .bss	00000000 .bss00000000 l    d  .rodata	00000000 .rodata00000000 l       .rodata	00000000 .LC000000000 l    d  .text.main	00000000 .text.main00000000 l    d  .debug_info	00000000 .debug_info00000000 l    d  .debug_abbrev	00000000 .debug_abbrev00000000 l    d  .debug_loc	00000000 .debug_loc00000000 l    d  .debug_aranges	00000000 .debug_aranges00000000 l    d  .debug_macinfo	00000000 .debug_macinfo00000000 l    d  .debug_line	00000000 .debug_line00000000 l    d  .debug_str	00000000 .debug_str00000000 l    d  .debug_frame	00000000 .debug_frame00000000 l    d  .comment	00000000 .comment00000000 l    d  .ARM.attributes	00000000 .ARM.attributes00000000         *UND*	00000000 __aeabi_fadd00000000         *UND*	00000000 __aeabi_dadd00000000 g     F .text.main	0000006a main00000000         *UND*	00000000 printfDisassembly of section .text.main:00000000 <main>:#include "derivative.h" /* include peripheral declarations */int main(void){   0:	b580      	push	{r7, lr}   2:	b090      	sub	sp, #64	; 0x40   4:	af00      	add	r7, sp, #0	int counter = 0;   6:	f04f 0300 	mov.w	r3, #0   a:	63fb      	str	r3, [r7, #60]	; 0x3c	int a, b, c = 0;   c:	f04f 0300 	mov.w	r3, #0  10:	63bb      	str	r3, [r7, #56]	; 0x38	long int long_a, long_b, long_c;	float f_a, f_b, f_c;	double d_a, d_b, d_c;			b = 2; c = 3;  12:	f04f 0302 	mov.w	r3, #2  16:	637b      	str	r3, [r7, #52]	; 0x34  18:	f04f 0303 	mov.w	r3, #3  1c:	63bb      	str	r3, [r7, #56]	; 0x38	a = b + c;  1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34  20:	6bbb      	ldr	r3, [r7, #56]	; 0x38  22:	18d3      	adds	r3, r2, r3  24:	633b      	str	r3, [r7, #48]	; 0x30	long_a = long_b + long_c;  26:	6afa      	ldr	r2, [r7, #44]	; 0x2c  28:	6abb      	ldr	r3, [r7, #40]	; 0x28  2a:	18d3      	adds	r3, r2, r3  2c:	627b      	str	r3, [r7, #36]	; 0x24	f_a = f_b + f_c;  2e:	6a38      	ldr	r0, [r7, #32]  30:	69f9      	ldr	r1, [r7, #28]  32:	f7ff fffe 	bl	0 <__aeabi_fadd>			32: R_ARM_THM_CALL	__aeabi_fadd  36:	4603      	mov	r3, r0  38:	61bb      	str	r3, [r7, #24]	d_a = d_b + d_c;  3a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]  3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]  42:	f7ff fffe 	bl	0 <__aeabi_dadd>			42: R_ARM_THM_CALL	__aeabi_dadd  46:	4602      	mov	r2, r0  48:	460b      	mov	r3, r1  4a:	e9c7 2300 	strd	r2, r3, [r7]		printf("%i \n",a);  4e:	f240 0000 	movw	r0, #0			4e: R_ARM_THM_MOVW_ABS_NC	.LC0  52:	f2c0 0000 	movt	r0, #0			52: R_ARM_THM_MOVT_ABS	.LC0  56:	6b39      	ldr	r1, [r7, #48]	; 0x30  58:	f7ff fffe 	bl	0 <printf>			58: R_ARM_THM_CALL	printf		return 0;  5c:	f04f 0300 	mov.w	r3, #0}  60:	4618      	mov	r0, r3  62:	f107 0740 	add.w	r7, r7, #64	; 0x40  66:	46bd      	mov	sp, r7  68:	bd80      	pop	{r7, pc}  6a:	bf00      	nop