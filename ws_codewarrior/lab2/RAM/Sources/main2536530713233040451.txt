Sources\main.o:     file format elf32-littlearmSources\main.oarchitecture: arm, flags 0x00000011:HAS_RELOC, HAS_SYMSstart address 0x00000000private flags = 5000000: [Version5 EABI]Sections:Idx Name          Size      VMA       LMA       File off  Algn  0 .text         00000000  00000000  00000000  00000034  2**1                  CONTENTS, ALLOC, LOAD, READONLY, CODE  1 .data         00000000  00000000  00000000  00000034  2**0                  CONTENTS, ALLOC, LOAD, DATA  2 .bss          00000000  00000000  00000000  00000034  2**0                  ALLOC  3 .text.main    00000158  00000000  00000000  00000034  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE  4 .debug_info   00000112  00000000  00000000  0000018c  2**0                  CONTENTS, RELOC, READONLY, DEBUGGING  5 .debug_abbrev 00000050  00000000  00000000  0000029e  2**0                  CONTENTS, READONLY, DEBUGGING  6 .debug_loc    00000038  00000000  00000000  000002ee  2**0                  CONTENTS, RELOC, READONLY, DEBUGGING  7 .debug_aranges 00000020  00000000  00000000  00000326  2**0                  CONTENTS, RELOC, READONLY, DEBUGGING  8 .debug_macinfo 000671dd  00000000  00000000  00000346  2**0                  CONTENTS, READONLY, DEBUGGING  9 .debug_line   000001f9  00000000  00000000  00067523  2**0                  CONTENTS, RELOC, READONLY, DEBUGGING 10 .debug_str    0000016d  00000000  00000000  0006771c  2**0                  CONTENTS, READONLY, DEBUGGING 11 .comment      0000007a  00000000  00000000  00067889  2**0                  CONTENTS, READONLY 12 .ARM.attributes 00000033  00000000  00000000  00067903  2**0                  CONTENTS, READONLY 13 .debug_frame  00000030  00000000  00000000  00067938  2**2                  CONTENTS, RELOC, READONLY, DEBUGGINGSYMBOL TABLE:00000000 l    df *ABS*	00000000 main.c00000000 l    d  .text	00000000 .text00000000 l    d  .data	00000000 .data00000000 l    d  .bss	00000000 .bss00000000 l    d  .text.main	00000000 .text.main00000000 l    d  .debug_info	00000000 .debug_info00000000 l    d  .debug_abbrev	00000000 .debug_abbrev00000000 l    d  .debug_loc	00000000 .debug_loc00000000 l    d  .debug_aranges	00000000 .debug_aranges00000000 l    d  .debug_macinfo	00000000 .debug_macinfo00000000 l    d  .debug_line	00000000 .debug_line00000000 l    d  .debug_str	00000000 .debug_str00000000 l    d  .debug_frame	00000000 .debug_frame00000000 l    d  .comment	00000000 .comment00000000 l    d  .ARM.attributes	00000000 .ARM.attributes00000000         *UND*	00000000 __aeabi_fadd00000000         *UND*	00000000 __aeabi_fsub00000000         *UND*	00000000 __aeabi_fmul00000000         *UND*	00000000 __aeabi_fdiv00000000         *UND*	00000000 __aeabi_i2f00000000         *UND*	00000000 __aeabi_f2iz00000000         *UND*	00000000 __aeabi_ui2f00000000 g     F .text.main	00000156 mainDisassembly of section .text.main:00000000 <main>: * */#include "derivative.h" /* include peripheral declarations */int main(void) {   0:	b580      	push	{r7, lr}   2:	b08a      	sub	sp, #40	; 0x28   4:	af00      	add	r7, sp, #0	//podemos ver que ha reservado 36 espacios.	//Dado que un word son 4 bites, 36/4 = 9, 	//que es la cantidad de variables declarado.	// Asignaciones 	a_int = 1;  // escribir registro    6:	f04f 0301 	mov.w	r3, #1   a:	627b      	str	r3, [r7, #36]	; 0x24				// guardar en la pila 	b_int = 2;   c:	f04f 0302 	mov.w	r3, #2  10:	623b      	str	r3, [r7, #32]	c_int = 3;  12:	f04f 0303 	mov.w	r3, #3  16:	61fb      	str	r3, [r7, #28]	a_uint = 1;  18:	f04f 0301 	mov.w	r3, #1  1c:	61bb      	str	r3, [r7, #24]	b_uint = 2;  1e:	f04f 0302 	mov.w	r3, #2  22:	617b      	str	r3, [r7, #20]	c_uint = 3;  24:	f04f 0303 	mov.w	r3, #3  28:	613b      	str	r3, [r7, #16]	a_float = 1.0;  2a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000  2e:	60fb      	str	r3, [r7, #12]	b_float = 2.0;  30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000  34:	60bb      	str	r3, [r7, #8]	c_float = 3.0;  36:	f04f 0300 	mov.w	r3, #0  3a:	f2c4 0340 	movt	r3, #16448	; 0x4040  3e:	607b      	str	r3, [r7, #4]	//Operaciones + - * /	//signed	c_int = a_int + b_int;  40:	6a7a      	ldr	r2, [r7, #36]	; 0x24  42:	6a3b      	ldr	r3, [r7, #32]  44:	18d3      	adds	r3, r2, r3  46:	61fb      	str	r3, [r7, #28]	c_int = a_int - b_int;  48:	6a7a      	ldr	r2, [r7, #36]	; 0x24  4a:	6a3b      	ldr	r3, [r7, #32]  4c:	1ad3      	subs	r3, r2, r3  4e:	61fb      	str	r3, [r7, #28]	c_int = a_int * b_int;  50:	6a7b      	ldr	r3, [r7, #36]	; 0x24  52:	6a3a      	ldr	r2, [r7, #32]  54:	fb02 f303 	mul.w	r3, r2, r3  58:	61fb      	str	r3, [r7, #28]	c_int = a_int / b_int;  5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24  5c:	6a3b      	ldr	r3, [r7, #32]  5e:	fb92 f3f3 	sdiv	r3, r2, r3  62:	61fb      	str	r3, [r7, #28]	//hacen las operaciones aritmeticas requeridas	//adds subs mul.w (multiplicacin datos de un solo word)	//sdiv (signed division) 	//unsigned	c_uint = a_uint + b_uint;  64:	69ba      	ldr	r2, [r7, #24]  66:	697b      	ldr	r3, [r7, #20]  68:	18d3      	adds	r3, r2, r3  6a:	613b      	str	r3, [r7, #16]	c_uint = a_uint - b_uint;  6c:	69ba      	ldr	r2, [r7, #24]  6e:	697b      	ldr	r3, [r7, #20]  70:	1ad3      	subs	r3, r2, r3  72:	613b      	str	r3, [r7, #16]	c_uint = a_uint * b_uint;  74:	69bb      	ldr	r3, [r7, #24]  76:	697a      	ldr	r2, [r7, #20]  78:	fb02 f303 	mul.w	r3, r2, r3  7c:	613b      	str	r3, [r7, #16]	c_uint = a_uint / b_uint;  7e:	69ba      	ldr	r2, [r7, #24]  80:	697b      	ldr	r3, [r7, #20]  82:	fbb2 f3f3 	udiv	r3, r2, r3  86:	613b      	str	r3, [r7, #16]	//hacen las operaciones aritmeticas requeridas	//adds subs mul.w (multiplicacin datos de un solo word)	//udiv (unsigned division) 	//float	c_float = a_float + b_float;  88:	68f8      	ldr	r0, [r7, #12]  8a:	68b9      	ldr	r1, [r7, #8]  8c:	f7ff fffe 	bl	0 <__aeabi_fadd>			8c: R_ARM_THM_CALL	__aeabi_fadd  90:	4603      	mov	r3, r0  92:	607b      	str	r3, [r7, #4]	c_float = a_float - b_float;  94:	68f8      	ldr	r0, [r7, #12]  96:	68b9      	ldr	r1, [r7, #8]  98:	f7ff fffe 	bl	0 <__aeabi_fsub>			98: R_ARM_THM_CALL	__aeabi_fsub  9c:	4603      	mov	r3, r0  9e:	607b      	str	r3, [r7, #4]	c_float = a_float * b_float;  a0:	68f8      	ldr	r0, [r7, #12]  a2:	68b9      	ldr	r1, [r7, #8]  a4:	f7ff fffe 	bl	0 <__aeabi_fmul>			a4: R_ARM_THM_CALL	__aeabi_fmul  a8:	4603      	mov	r3, r0  aa:	607b      	str	r3, [r7, #4]	c_float = a_float / b_float;  ac:	68f8      	ldr	r0, [r7, #12]  ae:	68b9      	ldr	r1, [r7, #8]  b0:	f7ff fffe 	bl	0 <__aeabi_fdiv>			b0: R_ARM_THM_CALL	__aeabi_fdiv  b4:	4603      	mov	r3, r0  b6:	607b      	str	r3, [r7, #4]	//el resultado se carga en r0 para luego volver a 	//cargarse en la pila.  		//Aritmeticas especiales		a_int = b_int*16;  b8:	6a3b      	ldr	r3, [r7, #32]  ba:	ea4f 1303 	mov.w	r3, r3, lsl #4  be:	627b      	str	r3, [r7, #36]	; 0x24	a_int = b_int<<4;  c0:	6a3b      	ldr	r3, [r7, #32]  c2:	ea4f 1303 	mov.w	r3, r3, lsl #4  c6:	627b      	str	r3, [r7, #36]	; 0x24	//Misma operacion de desplazamiento en ambos	a_float = b_float*16;  c8:	68b8      	ldr	r0, [r7, #8]  ca:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000  ce:	f7ff fffe 	bl	0 <__aeabi_fmul>			ce: R_ARM_THM_CALL	__aeabi_fmul  d2:	4603      	mov	r3, r0  d4:	60fb      	str	r3, [r7, #12]	//a_float = b_float<<4; operacin invalida	a_int = b_int/16;   d6:	6a3b      	ldr	r3, [r7, #32]  d8:	2b00      	cmp	r3, #0  da:	da01      	bge.n	e0 <main+0xe0>  dc:	f103 030f 	add.w	r3, r3, #15  e0:	ea4f 1323 	mov.w	r3, r3, asr #4  e4:	627b      	str	r3, [r7, #36]	; 0x24	//se compara si b_int es cero antes que nada.	// Y luego se hace un desplazamiento aritmetico a la derecha	a_int = b_int>>4;  e6:	6a3b      	ldr	r3, [r7, #32]  e8:	ea4f 1323 	mov.w	r3, r3, asr #4  ec:	627b      	str	r3, [r7, #36]	; 0x24	// con desplazamento y ya	a_float = b_float/16;  ee:	68b8      	ldr	r0, [r7, #8]  f0:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000  f4:	f7ff fffe 	bl	0 <__aeabi_fdiv>			f4: R_ARM_THM_CALL	__aeabi_fdiv  f8:	4603      	mov	r3, r0  fa:	60fb      	str	r3, [r7, #12]	//Mediante libreria	//a_float = b_float>>4;		// Conversin entre tipo de datos		a_int = b_int*a_uint;  fc:	6a3b      	ldr	r3, [r7, #32]  fe:	69ba      	ldr	r2, [r7, #24] 100:	fb02 f303 	mul.w	r3, r2, r3 104:	627b      	str	r3, [r7, #36]	; 0x24	a_uint = a_int*b_uint; 106:	6a7b      	ldr	r3, [r7, #36]	; 0x24 108:	697a      	ldr	r2, [r7, #20] 10a:	fb02 f303 	mul.w	r3, r2, r3 10e:	61bb      	str	r3, [r7, #24]	a_int = b_int*a_float; 110:	6a38      	ldr	r0, [r7, #32] 112:	f7ff fffe 	bl	0 <__aeabi_i2f>			112: R_ARM_THM_CALL	__aeabi_i2f 116:	4603      	mov	r3, r0 118:	4618      	mov	r0, r3 11a:	68f9      	ldr	r1, [r7, #12] 11c:	f7ff fffe 	bl	0 <__aeabi_fmul>			11c: R_ARM_THM_CALL	__aeabi_fmul 120:	4603      	mov	r3, r0 122:	4618      	mov	r0, r3 124:	f7ff fffe 	bl	0 <__aeabi_f2iz>			124: R_ARM_THM_CALL	__aeabi_f2iz 128:	4603      	mov	r3, r0 12a:	627b      	str	r3, [r7, #36]	; 0x24	a_float = a_int*b_float; 12c:	6a78      	ldr	r0, [r7, #36]	; 0x24 12e:	f7ff fffe 	bl	0 <__aeabi_i2f>			12e: R_ARM_THM_CALL	__aeabi_i2f 132:	4603      	mov	r3, r0 134:	4618      	mov	r0, r3 136:	68b9      	ldr	r1, [r7, #8] 138:	f7ff fffe 	bl	0 <__aeabi_fmul>			138: R_ARM_THM_CALL	__aeabi_fmul 13c:	4603      	mov	r3, r0 13e:	60fb      	str	r3, [r7, #12]	a_float = a_uint*b_float; 140:	69b8      	ldr	r0, [r7, #24] 142:	f7ff fffe 	bl	0 <__aeabi_ui2f>			142: R_ARM_THM_CALL	__aeabi_ui2f 146:	4603      	mov	r3, r0 148:	4618      	mov	r0, r3 14a:	68b9      	ldr	r1, [r7, #8] 14c:	f7ff fffe 	bl	0 <__aeabi_fmul>			14c: R_ARM_THM_CALL	__aeabi_fmul 150:	4603      	mov	r3, r0 152:	60fb      	str	r3, [r7, #12]				for (;;) {	} 154:	e7fe      	b.n	154 <main+0x154> 156:	bf00      	nop