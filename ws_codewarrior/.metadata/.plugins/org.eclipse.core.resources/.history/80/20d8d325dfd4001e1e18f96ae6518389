Sources\main.o:     file format elf32-littlearmSources\main.oarchitecture: arm, flags 0x00000011:HAS_RELOC, HAS_SYMSstart address 0x00000000private flags = 5000000: [Version5 EABI]Sections:Idx Name          Size      VMA       LMA       File off  Algn  0 .text         00000000  00000000  00000000  00000034  2**1                  CONTENTS, ALLOC, LOAD, READONLY, CODE  1 .data         00000000  00000000  00000000  00000034  2**0                  CONTENTS, ALLOC, LOAD, DATA  2 .bss          00000000  00000000  00000000  00000034  2**0                  ALLOC  3 .text.fun1    00000024  00000000  00000000  00000034  2**2                  CONTENTS, ALLOC, LOAD, READONLY, CODE  4 .text.fun2    0000001c  00000000  00000000  00000058  2**2                  CONTENTS, ALLOC, LOAD, READONLY, CODE  5 .text.fun3    00000020  00000000  00000000  00000074  2**2                  CONTENTS, ALLOC, LOAD, READONLY, CODE  6 .text.fun4    00000018  00000000  00000000  00000094  2**2                  CONTENTS, ALLOC, LOAD, READONLY, CODE  7 .text.main    00000038  00000000  00000000  000000ac  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE  8 .debug_info   00000186  00000000  00000000  000000e4  2**0                  CONTENTS, RELOC, READONLY, DEBUGGING  9 .debug_abbrev 000000d1  00000000  00000000  0000026a  2**0                  CONTENTS, READONLY, DEBUGGING 10 .debug_loc    00000118  00000000  00000000  0000033b  2**0                  CONTENTS, RELOC, READONLY, DEBUGGING 11 .debug_aranges 00000040  00000000  00000000  00000453  2**0                  CONTENTS, RELOC, READONLY, DEBUGGING 12 .debug_macinfo 00067877  00000000  00000000  00000493  2**0                  CONTENTS, READONLY, DEBUGGING 13 .debug_line   000002f8  00000000  00000000  00067d0a  2**0                  CONTENTS, RELOC, READONLY, DEBUGGING 14 .debug_str    0000015e  00000000  00000000  00068002  2**0                  CONTENTS, READONLY, DEBUGGING 15 .comment      0000007a  00000000  00000000  00068160  2**0                  CONTENTS, READONLY 16 .ARM.attributes 00000033  00000000  00000000  000681da  2**0                  CONTENTS, READONLY 17 .debug_frame  000000a0  00000000  00000000  00068210  2**2                  CONTENTS, RELOC, READONLY, DEBUGGINGSYMBOL TABLE:00000000 l    df *ABS*	00000000 main.c00000000 l    d  .text	00000000 .text00000000 l    d  .data	00000000 .data00000000 l    d  .bss	00000000 .bss00000000 l    d  .text.fun1	00000000 .text.fun100000000 l    d  .text.fun2	00000000 .text.fun200000000 l    d  .text.fun3	00000000 .text.fun300000000 l    d  .text.fun4	00000000 .text.fun400000000 l    d  .text.main	00000000 .text.main00000000 l    d  .debug_info	00000000 .debug_info00000000 l    d  .debug_abbrev	00000000 .debug_abbrev00000000 l    d  .debug_loc	00000000 .debug_loc00000000 l    d  .debug_aranges	00000000 .debug_aranges00000000 l    d  .debug_macinfo	00000000 .debug_macinfo00000000 l    d  .debug_line	00000000 .debug_line00000000 l    d  .debug_str	00000000 .debug_str00000000 l    d  .debug_frame	00000000 .debug_frame00000000 l    d  .comment	00000000 .comment00000000 l    d  .ARM.attributes	00000000 .ARM.attributes00000000 g     F .text.fun1	00000022 fun100000000 g     F .text.fun2	0000001a fun200000000 g     F .text.fun3	0000001e fun300000000 g     F .text.fun4	00000018 fun400000000 g     F .text.main	00000036 mainDisassembly of section .text.fun1:00000000 <fun1>:#include "derivative.h" /* include peripheral declarations */#include <stdio.h>#include <string.h>void fun1(){   0:	b480      	push	{r7}   2:	b085      	sub	sp, #20   4:	af00      	add	r7, sp, #0	int internal=0;   6:	f04f 0300 	mov.w	r3, #0   a:	60fb      	str	r3, [r7, #12]	int internal2=0;   c:	f04f 0300 	mov.w	r3, #0  10:	60bb      	str	r3, [r7, #8]	int internal3=0;  12:	f04f 0300 	mov.w	r3, #0  16:	607b      	str	r3, [r7, #4]	}  18:	f107 0714 	add.w	r7, r7, #20  1c:	46bd      	mov	sp, r7  1e:	bc80      	pop	{r7}  20:	4770      	bx	lr  22:	bf00      	nopDisassembly of section .text.fun2:00000000 <fun2>: * direccin de la funcin mas un word de retorno. (4+4+4)+4+4= Variables internas + return + funcin.  * Se ejecuta el codigo interno. * Desdesplazamos el Stack pointer y se carga de nuevo y se saca el valor de la pila. * Por ultimo se desenlaza. * */int fun2(){   0:	b480      	push	{r7}   2:	b083      	sub	sp, #12   4:	af00      	add	r7, sp, #0	int internal = 0;   6:	f04f 0300 	mov.w	r3, #0   a:	607b      	str	r3, [r7, #4]	return internal;   c:	687b      	ldr	r3, [r7, #4]	}   e:	4618      	mov	r0, r3  10:	f107 070c 	add.w	r7, r7, #12  14:	46bd      	mov	sp, r7  16:	bc80      	pop	{r7}  18:	4770      	bx	lr  1a:	bf00      	nopDisassembly of section .text.fun3:00000000 <fun3>:/* Lo mismo que antes pero la variable se guarda y se carga en un registro para sacar su valor fuera  * de la funcin. * */int fun3(int a){   0:	b480      	push	{r7}   2:	b083      	sub	sp, #12   4:	af00      	add	r7, sp, #0   6:	6078      	str	r0, [r7, #4]	a++;   8:	687b      	ldr	r3, [r7, #4]   a:	f103 0301 	add.w	r3, r3, #1   e:	607b      	str	r3, [r7, #4]	return a;  10:	687b      	ldr	r3, [r7, #4]	}  12:	4618      	mov	r0, r3  14:	f107 070c 	add.w	r7, r7, #12  18:	46bd      	mov	sp, r7  1a:	bc80      	pop	{r7}  1c:	4770      	bx	lr  1e:	bf00      	nopDisassembly of section .text.fun4:00000000 <fun4>:// Carga en un registro el dato de entrada y llama a la funcin. void fun4(int a, int* b){   0:	b480      	push	{r7}   2:	b085      	sub	sp, #20   4:	af00      	add	r7, sp, #0   6:	6078      	str	r0, [r7, #4]   8:	6039      	str	r1, [r7, #0]	int internal = a;   a:	687b      	ldr	r3, [r7, #4]   c:	60fb      	str	r3, [r7, #12]	}   e:	f107 0714 	add.w	r7, r7, #20  12:	46bd      	mov	sp, r7  14:	bc80      	pop	{r7}  16:	4770      	bx	lrDisassembly of section .text.main:00000000 <main>: int main(void){   0:	b580      	push	{r7, lr}   2:	b082      	sub	sp, #8   4:	af00      	add	r7, sp, #0	int a=1;   6:	f04f 0301 	mov.w	r3, #1   a:	607b      	str	r3, [r7, #4]	int b;		fun1();   c:	f7ff fffe 	bl	0 <main>			c: R_ARM_THM_CALL	fun1	//	 Llama directamente a la referencia de la funcin.	fun2();  10:	f7ff fffe 	bl	0 <main>			10: R_ARM_THM_CALL	fun2	b = fun3(a);  14:	6878      	ldr	r0, [r7, #4]  16:	f7ff fffe 	bl	0 <main>			16: R_ARM_THM_CALL	fun3  1a:	4603      	mov	r3, r0  1c:	603b      	str	r3, [r7, #0]	fun4(a, &b);  1e:	463b      	mov	r3, r7  20:	6878      	ldr	r0, [r7, #4]  22:	4619      	mov	r1, r3  24:	f7ff fffe 	bl	0 <main>			24: R_ARM_THM_CALL	fun4	//	for(;;) {	   //	   	counter++;//	}		return 0;  28:	f04f 0300 	mov.w	r3, #0}  2c:	4618      	mov	r0, r3  2e:	f107 0708 	add.w	r7, r7, #8  32:	46bd      	mov	sp, r7  34:	bd80      	pop	{r7, pc}  36:	bf00      	nop