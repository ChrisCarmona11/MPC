/*FUNCTION*-------------------------------------------------------------------
*
* Function Name    : time_delay 
* Returned Value   :
* Comments         : Wait until interrupt of timer occur
*    
*
*END*----------------------------------------------------------------------*/
void time_delay(unsigned int delay) 
{
	unsigned int u32Delay;
	unsigned int u32Delay2;
	unsigned int u32Delay3;
   
	for(u32Delay=0;u32Delay<delay;u32Delay++);
	  for(u32Delay2=0;u32Delay2<16;u32Delay2++)
		for(u32Delay3=0;u32Delay3<0x35551;u32Delay3++);
}

/*
 * Delay function using the LPTMR module
 */
void lptmr_time_counter()
{
  int compare_value=1000;  //value must be less than 0xFFFF or 65535

  //Enable Port clocks
  SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK | SIM_SCGC5_PORTB_MASK | SIM_SCGC5_PORTC_MASK | SIM_SCGC5_PORTD_MASK | SIM_SCGC5_PORTE_MASK;

  /* Enable LPT Module */
  SIM_SCGC5|=SIM_SCGC5_LPTIMER_MASK;

  lptmr_clear_registers();

  /* Configure LPTMR */
  LPTMR0_CMR=LPTMR_CMR_COMPARE(compare_value);  //Set compare value
  LPTMR0_PSR=LPTMR_PSR_PCS(0x1)|LPTMR_PSR_PBYP_MASK;  //Use LPO clock and bypass prescale
  
  // Habilitada el reloj 01 y hecho or con PBYP para deshabilitarlo.
  
  LPTMR0_CSR|=LPTMR_CSR_TEN_MASK; //Turn on LPTMR with default settings
  //Para selccionar el bit de entrada 1 que es precisamente el reloj de 1KHz.
  
  
  //Wait for Timer Compare Flag to be set
  while((LPTMR0_CSR & LPTMR_CSR_TCF_MASK)==0) //Si el registro CSR y el bit TCF 
  {
    //This may not get proper counter data if the CNR is read at the same time it is incremented
   printf("Current value of counter register CNR is %d\n",LPTMR0_CNR);
  }
	
  LPTMR0_CSR|=LPTMR_CSR_TCF_MASK; // Para limpiar el TCF del CSR.
  
}

void lptmr_clear_registers()
{
  LPTMR0_CSR=0x00;
  LPTMR0_PSR=0x00;
  LPTMR0_CMR=0x00;
}

/*
 * Timer will trigger interrupt 
 */
void lptmr_interrupt()
{
  int compare_value=1000;  //value must be less than 0xFFFF

  //Enable Port clocks
  SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK | SIM_SCGC5_PORTB_MASK | SIM_SCGC5_PORTC_MASK | SIM_SCGC5_PORTD_MASK | SIM_SCGC5_PORTE_MASK;

  /* Enable LPT Module */
  SIM_SCGC5|=SIM_SCGC5_LPTIMER_MASK;

  LPTMR_INTERRUPT=0; //Clear global variable

  //Reset LPTMR module
  lptmr_clear_registers();

  /* Enable LPT Interrupt in NVIC*/
  enable_irq(85); //LPTMR Vector is 101. IRQ# is 101-16=85

  /* Configure LPT */
  LPTMR0_CMR=LPTMR_CMR_COMPARE(compare_value);  //Set compare value
  LPTMR0_PSR=LPTMR_PSR_PCS(0x1)|LPTMR_PSR_PBYP_MASK;  //Use LPO clock and bypass prescale
  
  // Habilita la interrupcion del timer.
  LPTMR0_CSR=LPTMR_CSR_TIE_MASK;  //Enable LPT interrupt

  
  
  LPTMR0_CSR|=LPTMR_CSR_TEN_MASK; //Turn on LPTMR and start counting

}

void lptmr_isr(void)
{
  LPTMR0_CSR|=LPTMR_CSR_TCF_MASK;  //Clear LPT Compare flag
  LPTMR_INTERRUPT=1;  //Set global variable
  int_counter++;
  // pasa_segundo = 1;
 // printf("\n\nIn LPT ISR!\n\n");
 // printf("Veces en interrupcion %d \n", int_counter);
}
