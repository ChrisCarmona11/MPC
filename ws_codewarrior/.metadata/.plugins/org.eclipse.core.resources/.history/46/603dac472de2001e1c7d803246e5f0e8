/*
 * main.c
 *
 *  Created on: Feb 27, 2024
 *      Author: chris
 */
/*
 * main implementation: use this 'C' sample to create your own application
 *
 */

#include "derivative.h" /* include peripheral declarations */
#include <constantes_int_1.h>
#include "Driver_SLCD.h"
#include <float.h>
#include <math.h>
#include <stdio.h>
#include <cmath>

#define CHARWIDTH 6

//valores para contadores
int PIT0_INTERRUP_FLAG = 0;
int LPTMR_INTERRUPT = 0;
int int_counter = 0;
static int contador_ms = 0;
#define LDVAL_TRIGGER_1MS 20640 // 1ms/48.45ns = 20639.83

#define VALOR_OBJETIVO 999
//regist donde guardar los contadores de ms
static int canal_int,canal;			// Variable para ir atravesando el regist

static float scala = 10.0 / 65535.0;

static int regist[128][4];
static int buffer[128][4];

//Los numeros de la pantalla 

static int unidades, decenas, centenas;
static int regDecenas, regCentenas;


extern void enable_irq(int irq); // Función para habilitar los regists de interrupción

void pit_interrupt_config(void)
/*
 * Contador para detectar la interrupción de milisegundo mediante un preescaler
 * */
{
	// Enable the clock to the PIT module
	SIM_SCGC6 |= SIM_SCGC6_PIT_MASK;
	// Enable PIT module control register
	PIT_MCR = PIT_MCR_FRZ_MASK;
	// Disable timer and interrupt
	PIT_TCTRL0 = 0;
	// Load value (Timer Load Value Register (PIT_LDVALn))
	PIT_LDVAL0 = LDVAL_TRIGGER_1MS; // Trigger 1 ms
	// Clear any pending interrupt
	PIT_TFLG0 |= PIT_TFLG_TIF_MASK;
	// Enable interrupt
	enable_irq(68); // regist 2 y 4 de sobra asi que el bit flag será el 4 creo.
	// Enable timer and interrupt
	PIT_TCTRL0 = (PIT_TCTRL_TIE_MASK | PIT_TCTRL_TEN_MASK);
}

float toVolts(int number) {
	float valor = number * scala;
	return valor;
}

void De_Float_Cadena(float valor, int *array)
	{
	int i=0;
    long Num_High;
	long Num_Low;

             //Separamos el float,
	Num_High = (int)(valor); //el valor por encima del punto se guarda en Num_High
	Num_Low = (int)(valor*1000)-Num_High*1000; // el valor por debajo del punto se guarda en Num_Low
	
	array[0]= Num_High/10;
	array[1]= Num_High%10;
	array[2]= (Num_Low/100);
	array[3]= ((Num_Low%100)/10);
	array[4]= (Num_Low%10);

	}

void lptmr_clear_registers() {
	LPTMR0_CSR = 0x00;
	LPTMR0_PSR = 0x00;
	LPTMR0_CMR = 0x00;
}

void lptmr_interrupt() {
	int compare_value = 999;  //value must be less than 0xFFFF

	//Enable Port clocks
	SIM_SCGC5 |=
			SIM_SCGC5_PORTA_MASK | SIM_SCGC5_PORTB_MASK | SIM_SCGC5_PORTC_MASK
					| SIM_SCGC5_PORTD_MASK | SIM_SCGC5_PORTE_MASK;

	/* Enable LPT Module */SIM_SCGC5 |= SIM_SCGC5_LPTIMER_MASK;

	LPTMR_INTERRUPT = 0; //Clear global variable

	//Reset LPTMR module
	lptmr_clear_registers();

	/* Enable LPT Interrupt in NVIC*/
	enable_irq(85); //LPTMR Vector is 101. IRQ# is 101-16=85

	/* Configure LPT */LPTMR0_CMR = LPTMR_CMR_COMPARE(compare_value); //Set compare value
	LPTMR0_PSR = LPTMR_PSR_PCS(0x1) | LPTMR_PSR_PBYP_MASK; //Use LPO clock and bypass prescale

	// Habilita la interrupcion del timer.
	LPTMR0_CSR = LPTMR_CSR_TIE_MASK;  //Enable LPT interrupt

	LPTMR0_CSR |= LPTMR_CSR_TEN_MASK; //Turn on LPTMR and start counting
	
	LPTMR_INTERRUPT=0;

}

void lptmr_isr(void)
/* Rutina de servicio de antenciñon a la interrupción.
 * 
 * */
{
  LPTMR0_CSR|=LPTMR_CSR_TCF_MASK;  //Clear LPT Compare flag
  LPTMR_INTERRUPT=1;  //Set global variable
  int_counter++;
}

void pit0_isr(void) {
	PIT_TFLG0 |= PIT_TFLG_TIF_MASK; //Clear LPT Compare flag
	for (canal_int = 0; canal_int < 4; canal_int++) {
		buffer[contador_ms][canal_int]= tabla[contador_ms][canal_int];
	}
	contador_ms++; //Aumentar el contador de milisegundos
	if (contador_ms == 128) {
		PIT0_INTERRUP_FLAG = 1;
		contador_ms = 0;
	}
}

void prettyPrint(int number) {
	unidades = number % 10;
	decenas = (number / 10) % 10;
	centenas = (number / 100) % 10;

	_SLCDModule_PrintNumber(unidades, CHARWIDTH * 5);
	_SLCDModule_PrintNumber(decenas, CHARWIDTH*4);
	_SLCDModule_PrintNumber(centenas, CHARWIDTH*3);
//	if (regDecenas != decenas) {
//		_SLCDModule_PrintNumber(decenas, CHARWIDTH*4);
//		regDecenas= decenas;
//	}
//	if (regCentenas != centenas) {
//		_SLCDModule_PrintNumber(centenas, CHARWIDTH*3);
//		regCentenas=centenas;
//	}

}

void printToSLCD (int *numberArray){
	int i = 0;
	int roomForMinus = 0;
	if (numberArray[0]<0){
		_SLCDModule_PrintString("-",0);
		roomForMinus = 6;}
	for (i=0;i<5;i++){
		int position = i*CHARWIDTH;
		_SLCDModule_PrintNumber(abs(numberArray[i]),position+roomForMinus);
		_SLCDModule_SetSegment(17,6);
	}
}

int main(void) {

	//Configuracion de los timers
	pit_interrupt_config();
	lptmr_interrupt();
	_SLCDModule_Init();

	int max[4] = { 0, 0, 0, 0 };
	int min[4] = { 0, 0, 0, 0 };
	int accumulative[4] = { 0, 0, 0, 0 };
	float quadratic[4] = { 0, 0, 0, 0 };
	float max_f[4];
	float min_f[4];
	canal = 0;
	int muestra = 0;
	
	int current_canal = 0;
	int display_show = 0;
	while (1) {
		if (PIT0_INTERRUP_FLAG == 1) {
			memcpy(regist, buffer, sizeof(int) * 128 * 4); 	// volcar al registro la muesta entera
			memset(buffer, 0, sizeof(int) * 128 * 4); 			// Limpiar el buffer
			for (canal = 0; canal < 4; canal++) {
				for (muestra = 0; muestra < 128; muestra++) {
					if (regist[muestra][canal] > max[canal]) {
						max[canal] = regist[muestra][canal];
					}
					if (regist[muestra][canal] < min[canal]) {
						min[canal] = regist[muestra][canal];
					}
					accumulative[canal] += regist[muestra][canal];
					quadratic[canal] +=  toVolts(regist[muestra][canal])
							* toVolts(regist[muestra][canal]);
					if ( muestra == 127) 
						PIT0_INTERRUP_FLAG = 0;
				}
			}
			float promedio[4];
			float promedioQ[4];
			
			int pantalla[5];

			for (canal = 0; canal < 4; canal++) {
				max_f[canal] = toVolts(max[canal]);
				min_f[canal] = toVolts(min[canal]);
				promedio[canal] = toVolts(
						(int) (((float) accumulative[canal]) / 128.0));
				promedioQ[canal] = sqrt(quadratic[canal] / 128.0);

				//Limpiar los registros de las variables que se visualizan.
				max[canal] = 0;
				min[canal] = 0;
				accumulative[canal] = 0;
				quadratic[canal] = 0;
			}
			if (LPTMR_INTERRUPT ==1){
				LPTMR_INTERRUPT =0;
				current_canal = (int_counter%120)/30;
				display_show = (int_counter%30)/5;
//				if ((int_counter%5)==0)
				_SLCDModule_ClearLCD(1);
				switch (display_show){
				    case 0:
				    	if ((int_counter%5)<2){
				    	De_Float_Cadena(max_f[current_canal],pantalla);
				    	printToSLCD(pantalla);
				    	}else{
				    	De_Float_Cadena(min_f[current_canal],pantalla);
						printToSLCD(pantalla);
				    	}
				    	break;
				    case 1:
				    	De_Float_Cadena(max_f[current_canal]-min_f[current_canal],pantalla);
				    							printToSLCD(pantalla);
				    	break;
				    case 2:
				    	De_Float_Cadena(promedio[current_canal],pantalla);
						printToSLCD(pantalla);
				    	break;
				    case 3:
				    	De_Float_Cadena(promedioQ[current_canal],pantalla);
						printToSLCD(pantalla);
				    	break;
				    default:
				    	_SLCDModule_ClearSegment(14,6);
				    	prettyPrint(int_counter);			    	
				    	break;
				
				}
				
			}
			
		}
	}

	return 0;
}

